apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'kotlinx-serialization'
apply plugin: 'com.squareup.sqldelight'
apply from: rootProject.file('quality/ktlint.gradle')
apply from: rootProject.file('gradle/local/embrace.gradle')


def getGitCommitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

final buildProperties = new BuildProperties(file('secrets.properties'), file('secretsDefaults.properties'))

android {
    signingConfigs {
        debug {
            storeFile file('blockchainDebugKey.keystore')
            storePassword buildProperties.secrets['keyPassword'].toString()
            keyPassword buildProperties.secrets['keyPassword'].toString()
            keyAlias buildProperties.secrets['debugKeyAlias'].toString()
        }

        prodInternal {
            storeFile file('blockchainInternalKey.keystore')
            storePassword buildProperties.secrets['keyPasswordInternal'].toString()
            keyPassword buildProperties.secrets['keyPasswordInternal'].toString()
            keyAlias buildProperties.secrets['internalKeyAlias'].toString()
        }
    }
    compileSdkVersion Versions.compileSdk
    buildToolsVersion Versions.buildTools
    dexOptions.javaMaxHeapSize "3g"

    defaultConfig {
        applicationId "piuk.blockchain.android"
        targetSdkVersion Versions.targetSdk
        minSdkVersion Versions.minSdk
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        archivesBaseName = "blockchain-$versionName"

        // Flag to hide or show the Contacts feature
        buildConfigField "boolean", "LOG_KOIN_STARTUP", "false"
        buildConfigField "boolean", "SKIP_VERIFF_KYC", "false"
        buildConfigField "boolean", "INTERNAL", "true"

        buildConfigField "String", "SHAPE_SHIFT_API_KEY", "\"${buildProperties.secrets['shapeShiftApiKey']}\""

        manifestPlaceholders = [
                APP_NAME      : "@string/app_name",
                FABRIC_API_KEY: buildProperties.secrets['fabricApiKey'].toString()
        ]

        resConfigs 'en',
                'es',
                'b+es+419',
                'fr',
                'pt',
                'pt-rBR',
                'ru',
                'tr'
    }

    bundle {
        language {
            // Specifies that the app bundle should not support
            // configuration APKs for language resources. These
            // resources are instead packaged with each base and
            // dynamic feature APK.
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }

    flavorDimensions "environment"

    productFlavors {
        /**
         * Environments
         */
        envProd {
            dimension "environment"
            manifestPlaceholders = [
                    BACKUP_API_KEY     : buildProperties.secrets['prodGoogleBackupApiKey'].toString(),
                    DYNAMIC_LINK_HOST  : buildProperties.secrets['prodDynamicLink'].toString(),
                    DYNAMIC_LINK_HOST_2: buildProperties.secrets['prodDynamicLink2'].toString(),
                    LOGIN_LINK_HOST    : buildProperties.secrets['prodLoginLink'].toString(),
                    DEEPLINKING_URL    : buildProperties.secrets['deepLinkingURL'].toString(),
            ]
            buildConfigField "String", "EXPLORER_URL", "\"${buildProperties.secrets['prodExplorer']}\""
            buildConfigField "String", "API_URL", "\"${buildProperties.secrets['prodApiServer']}\""
            buildConfigField "String", "EVERYPAY_HOST_URL", "\"${buildProperties.secrets['prodEverypayHost']}\""
            buildConfigField "String", "ETHEREUM_WEBSOCKET_URL", "\"${buildProperties.secrets['prodEthWebsocket']}\""
            buildConfigField "String", "BITCOIN_CASH_WEBSOCKET_URL", "\"${buildProperties.secrets['prodBchWebsocket']}\""
            buildConfigField "String", "STATUS_API_URL", "\"${buildProperties.secrets['prodApiStatus']}\""
            buildConfigField "String", "NABU_WEBSOCKET_URL", "\"${buildProperties.secrets['prodNabuWebsocket']}\""
            buildConfigField "String", "HORIZON_URL", "\"${buildProperties.secrets['prodHorizonUrl']}\""
            buildConfigField "String", "PIT_LINKING_URL", "\"${buildProperties.secrets['prodPitDoLink']}\""
            buildConfigField "String", "BROKERAGE_SUCCESS", "\"${buildProperties.secrets['brokerageSuccessProduction']}\""
            buildConfigField "String", "PIT_LAUNCHING_URL", "\"${buildProperties.secrets['prodPitLaunch']}\""
            buildConfigField "String", "COINS_WEBSOCKET_URL", "\"${buildProperties.secrets['prodCoinsWebsocket']}\""
            buildConfigField "String", "ENVIRONMENT", '"env_prod"'
            buildConfigField "String", "VERSION_NAME_SUFFIX", "\"" + versionNameSuffix + "\""
            buildConfigField "String", "COMMIT_HASH", "\"\""
            buildConfigField "String", "SIFT_ACCOUNT_ID", "\"${buildProperties.secrets['prodSiftAccount']}\""
            buildConfigField "String", "SIFT_BEACON_KEY", "\"${buildProperties.secrets['prodSiftBeaconId']}\""
            buildConfigField "String", "RECAPTCHA_SITE_KEY", "\"${buildProperties.secrets['captchaProdSiteKey']}\""
            buildConfigField "String", "LOGIN_HOST_LINK", "\"${buildProperties.secrets['prodLoginLink']}\""
            buildConfigField "String", "DEEPLINK_HOST", "\"${buildProperties.secrets['prodDynamicLink']}\""
            buildConfigField "String", "ZENDESK_API_KEY", "\"${buildProperties.secrets['zendeskAccountKey']}\""
            buildConfigField "String", "ZENDESK_CHAT_KEY", "\"${buildProperties.secrets['zendeskChatChannelKey']}\""
            buildConfigField "boolean",  "INTERNAL", "false"
            buildConfigField "String", "WEB_WALLET_URL", "\"${buildProperties.secrets['prodLoginPortal']}\""

            buildConfigField "String", "PLAY_STORE_DEMO_EMAIL", "\"${buildProperties.secrets['playstoreProdDemoEmail']}\""
            buildConfigField "String", "PLAY_STORE_DEMO_WALLET_ID", "\"${buildProperties.secrets['playstoreProdDemoWalletId']}\""

            buildConfigField "String", "INTERCOM_API_KEY", "\"${buildProperties.secrets['intercomApiKey']}\""
            buildConfigField "String", "INTERCOM_APP_ID", "\"${buildProperties.secrets['intercomApplicationId']}\""

            buildConfigField "String", "WALLET_HELPER_URL", "\"${buildProperties.secrets['walletHelperProdURL']}\""

            def ciVersionCode = System.getenv("BITRISE_BUILD_NUMBER")
            if (ciVersionCode != null) {
                versionCode = ciVersionCode.toInteger()
            }
        }

        envInternalProd {
            dimension "environment"
            manifestPlaceholders = [
                    APP_NAME           : "@string/alpha_app_name",
                    BACKUP_API_KEY     : buildProperties.secrets['prodGoogleBackupApiKey'].toString(),
                    DYNAMIC_LINK_HOST  : buildProperties.secrets['prodDynamicLink'].toString(),
                    DYNAMIC_LINK_HOST_2: buildProperties.secrets['prodDynamicLink2'].toString(),
                    LOGIN_LINK_HOST    : buildProperties.secrets['prodLoginLink'].toString(),
                    DEEPLINKING_URL    : buildProperties.secrets['deepLinkingURL'].toString(),
            ]
            buildConfigField "String", "EXPLORER_URL", "\"${buildProperties.secrets['prodExplorer']}\""
            buildConfigField "String", "API_URL", "\"${buildProperties.secrets['prodApiServer']}\""
            buildConfigField "String", "EVERYPAY_HOST_URL", "\"${buildProperties.secrets['prodEverypayHost']}\""
            buildConfigField "String", "ETHEREUM_WEBSOCKET_URL", "\"${buildProperties.secrets['prodEthWebsocket']}\""
            buildConfigField "String", "BITCOIN_CASH_WEBSOCKET_URL", "\"${buildProperties.secrets['prodBchWebsocket']}\""
            buildConfigField "String", "STATUS_API_URL", "\"${buildProperties.secrets['prodApiStatus']}\""
            buildConfigField "String", "NABU_WEBSOCKET_URL", "\"${buildProperties.secrets['prodNabuWebsocket']}\""
            buildConfigField "String", "HORIZON_URL", "\"${buildProperties.secrets['prodHorizonUrl']}\""
            buildConfigField "String", "PIT_LINKING_URL", "\"${buildProperties.secrets['prodPitDoLink']}\""
            buildConfigField "String", "PIT_LAUNCHING_URL", "\"${buildProperties.secrets['prodPitLaunch']}\""
            buildConfigField "String", "COINS_WEBSOCKET_URL", "\"${buildProperties.secrets['prodCoinsWebsocket']}\""
            buildConfigField "String", "ENVIRONMENT", '"env_prod"'
            buildConfigField "String", "BROKERAGE_SUCCESS", "\"${buildProperties.secrets['brokerageSuccessProduction']}\""
            buildConfigField "String", "VERSION_NAME_SUFFIX", "\"" + versionNameSuffix + "\""
            buildConfigField "String", "COMMIT_HASH", "\"\""
            buildConfigField "String", "SIFT_ACCOUNT_ID", "\"${buildProperties.secrets['prodSiftAccount']}\""
            buildConfigField "String", "SIFT_BEACON_KEY", "\"${buildProperties.secrets['prodSiftBeaconId']}\""
            buildConfigField "String", "RECAPTCHA_SITE_KEY", "\"${buildProperties.secrets['captchaProdSiteKey']}\""
            buildConfigField "String", "LOGIN_HOST_LINK", "\"${buildProperties.secrets['prodLoginLink']}\""
            buildConfigField "String", "DEEPLINK_HOST", "\"${buildProperties.secrets['prodDynamicLink']}\""
            buildConfigField "String", "ZENDESK_API_KEY", "\"${buildProperties.secrets['zendeskAccountKey']}\""
            buildConfigField "String", "ZENDESK_CHAT_KEY", "\"${buildProperties.secrets['zendeskChatChannelKey']}\""
            buildConfigField "String", "WEB_WALLET_URL", "\"${buildProperties.secrets['prodLoginPortal']}\""
            buildConfigField "String", "PLAY_STORE_DEMO_EMAIL", "\"${buildProperties.secrets['playstoreProdDemoEmail']}\""
            buildConfigField "String", "PLAY_STORE_DEMO_WALLET_ID", "\"${buildProperties.secrets['playstoreProdDemoWalletId']}\""

            buildConfigField "String", "INTERCOM_API_KEY", "\"${buildProperties.secrets['intercomApiKey']}\""
            buildConfigField "String", "INTERCOM_APP_ID", "\"${buildProperties.secrets['intercomApplicationId']}\""

            buildConfigField "String", "WALLET_HELPER_URL", "\"${buildProperties.secrets['walletHelperProdURL']}\""

            applicationId "com.blockchain.wallet.internal"

            def ciVersionCode = System.getenv("BITRISE_BUILD_NUMBER")
            if (ciVersionCode != null) {
                versionCode = ciVersionCode.toInteger()
                versionNameSuffix = ".${ciVersionCode}_alpha"
            }
        }

        envStaging {
            dimension "environment"
            manifestPlaceholders = [
                    APP_NAME           : "@string/staging_app_name",
                    BACKUP_API_KEY     : buildProperties.secrets['stagingGoogleBackupApiKey'].toString(),
                    DYNAMIC_LINK_HOST  : buildProperties.secrets['stagingDynamicLink'].toString(),
                    DYNAMIC_LINK_HOST_2: buildProperties.secrets['stagingDynamicLink2'].toString(),
                    LOGIN_LINK_HOST    : buildProperties.secrets['stagingLoginLink'].toString(),
                    DEEPLINKING_URL    : buildProperties.secrets['deepLinkingURL'].toString(),
            ]
            buildConfigField "String", "EXPLORER_URL", "\"${buildProperties.secrets['stagingExplorer']}\""
            buildConfigField "String", "API_URL", "\"${buildProperties.secrets['stagingApiServer']}\""
            buildConfigField "String", "EVERYPAY_HOST_URL", "\"${buildProperties.secrets['stagingEverypayHost']}\""
            buildConfigField "String", "STATUS_API_URL", "\"${buildProperties.secrets['stagingApiStatus']}\""
            buildConfigField "String", "ETHEREUM_WEBSOCKET_URL", "\"${buildProperties.secrets['stagingEthWebsocket']}\""
            buildConfigField "String", "BITCOIN_CASH_WEBSOCKET_URL", "\"${buildProperties.secrets['stagingBchWebsocket']}\""
            buildConfigField "String", "NABU_WEBSOCKET_URL", "\"${buildProperties.secrets['stagingNabuWebsocket']}\""
            buildConfigField "String", "HORIZON_URL", "\"${buildProperties.secrets['stagingHorizonUrl']}\""
            buildConfigField "String", "PIT_LINKING_URL", "\"${buildProperties.secrets['stagingPitDoLink']}\""
            buildConfigField "String", "PIT_LAUNCHING_URL", "\"${buildProperties.secrets['stagingPitLaunch']}\""
            buildConfigField "String", "COINS_WEBSOCKET_URL", "\"${buildProperties.secrets['stagingCoinsWebsocket']}\""
            buildConfigField "String", "ENVIRONMENT", '"env_staging"'
            buildConfigField "String", "COMMIT_HASH", "\"${getGitCommitHash()}\""
            buildConfigField "String", "VERSION_NAME_SUFFIX", "\"" + versionNameSuffix + "\""
            buildConfigField "String", "SIFT_ACCOUNT_ID", "\"${buildProperties.secrets['stagingSiftAccount']}\""
            buildConfigField "String", "SIFT_BEACON_KEY", "\"${buildProperties.secrets['stagingSiftBeaconId']}\""
            buildConfigField "String", "RECAPTCHA_SITE_KEY", "\"${buildProperties.secrets['captchaStagingSiteKey']}\""
            buildConfigField "String", "LOGIN_HOST_LINK", "\"${buildProperties.secrets['stagingLoginLink']}\""
            buildConfigField "String", "DEEPLINK_HOST", "\"${buildProperties.secrets['stagingDynamicLink']}\""
            buildConfigField "String", "BROKERAGE_SUCCESS", "\"${buildProperties.secrets['brokerageSuccessStaging']}\""
            buildConfigField "String", "ZENDESK_API_KEY", "\"${buildProperties.secrets['zendeskAccountKey']}\""
            buildConfigField "String", "ZENDESK_CHAT_KEY", "\"${buildProperties.secrets['zendeskChatChannelKey']}\""
            buildConfigField "String", "WEB_WALLET_URL", "\"${buildProperties.secrets['stagingLoginPortal']}\""
            buildConfigField "String", "PLAY_STORE_DEMO_EMAIL", "\"${buildProperties.secrets['playstoreStagingDemoEmail']}\""
            buildConfigField "String", "PLAY_STORE_DEMO_WALLET_ID", "\"${buildProperties.secrets['playstoreStagingDemoWalletId']}\""

            buildConfigField "String", "INTERCOM_API_KEY", "\"${buildProperties.secrets['intercomApiKey']}\""
            buildConfigField "String", "INTERCOM_APP_ID", "\"${buildProperties.secrets['intercomApplicationId']}\""

            buildConfigField "String", "WALLET_HELPER_URL", "\"${buildProperties.secrets['walletHelperStagingURL']}\""

            versionNameSuffix '-staging'
            applicationId "piuk.blockchain.android.staging"
        }
    }

    buildTypes {
        release {
            productFlavors.envInternalProd.signingConfig signingConfigs.prodInternal
            debuggable false
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexEnabled true
        }
        debug {
            multiDexEnabled true
            buildConfigField "boolean",  "SKIP_VERIFF_KYC", "false"
        }
    }

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = Versions.kotlinJvmTarget
        }
    }

    lintOptions {
        checkReleaseBuilds true
        fatal 'StopShip'
        htmlReport true
        htmlOutput file("build/reports/lint-report.html")
        abortOnError true
        baseline file("lint-baseline.xml")
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/rxjava.properties'
        exclude 'jni/**'
        exclude 'solidity/**'
        exclude 'org.bitcoin.test.checkpoints.txt'
        exclude 'org.bitcoin.production.checkpoints.txt'
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion Versions.compose
        kotlinCompilerVersion Versions.composeKotlinCompile
    }

    testOptions {
        // Fix for Robolectric bug when using AAPT2
        unitTests.includeAndroidResources true
        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                if (System.getenv().containsKey("CIRCLE_BUILD_NUM")) {
                    events 'skipped', 'failed'
                } else {
                    events 'skipped', 'failed', 'standardOut', 'standardError'
                }
            }
            reports.junitXml.destination = file('../build/test-results/')
            maxHeapSize = "1g"
        }
    }
}

kapt {
    useBuildCache = true
}

dependencies {
    implementation project(':notifications')
    implementation project(':sunriver') // Just for pit linking TODO: Fix that
    implementation project(':coincore')
    implementation project(':core')
    implementation project(':veriff')
    implementation project(':blockchainApi')
    implementation project(':componentlib')
    implementation project(':biometrics')
    implementation project(':walletconnect')
    implementation project(':commonarch')
    implementation project(':wallet')
    implementation project(':common:interface')
    implementation project(':common:network')
    implementation project(':common:domain')
    implementation project(':common-view')
    implementation project(':payments:checkoutcom')
    implementation project(':payments:stripe')
    implementation project(':payments:googlepay')
    implementation project(':payments:core')
    implementation project(':deeplinking')
    implementation project(':logging:domain')
    implementation project(':logging:data')
    implementation project(':analytics:domain')
    implementation project(':analytics:data')
    implementation project(':store:core')
    implementation project(':store:caches:persistedjsonsqldelight')
    implementation project(':blockchainCard')

    implementation Libraries.multidex
    coreLibraryDesugaring Libraries.desugaring

    implementation Libraries.koin
    implementation Libraries.koinAndroid

    // Views
    implementation Libraries.countryPicker
    implementation Libraries.circleIndicator
    // TODO when we change the sparkline and coinview charts, we can remove the mpAndroidChart dependency
    implementation Libraries.charts
    api(project(":charts"))

    implementation Libraries.sparkline
    implementation Libraries.cardForm
    implementation Libraries.zxing
    implementation Libraries.sift

    // Google core
    implementation Libraries.googlePlayCore
    implementation Libraries.installReferrer

    implementation Libraries.appCompat
    implementation Libraries.navigationControllerCore
    implementation Libraries.navigationControllerFragments
    implementation Libraries.recyclerView
    implementation Libraries.cardView
    implementation Libraries.gridLayout
    implementation Libraries.design
    implementation Libraries.v14
    implementation Libraries.dynamicAnims
    implementation Libraries.constraintLayout

    implementation Libraries.lifecycleViewModel
    implementation Libraries.lifecycleViewModelExtensions
    implementation Libraries.lifecycleRuntime

    implementation Libraries.camera
    implementation Libraries.cameraView
    implementation Libraries.cameraLifecycle
    implementation Libraries.dexter

    implementation(Libraries.googlePlayServicesBase) {
        exclude group: 'com.android.support'
    }
    implementation Libraries.googlePlayServicesAuth
    implementation Libraries.googlePlaces
    implementation Libraries.adsIdentifier
    implementation Libraries.googleServicesReCaptcha
    implementation Libraries.biometricsApi

    implementation Libraries.gson
    implementation Libraries.kotlinJson
    implementation Libraries.json
    implementation Libraries.moshi

    // Utils
    implementation Libraries.libPhoneNumber
    implementation Libraries.yearclass
    implementation Libraries.stetho
    implementation Libraries.stethoOkHttp

    // Database
    implementation Libraries.sqlDelight
    implementation Libraries.rxSqlDelight

    // Navigation
    implementation Libraries.navigationControllerCore
    implementation Libraries.navigationControllerFragments

    // RxJava
    implementation Libraries.rxReplayShareKotlin
    implementation Libraries.rxRelay
    implementation Libraries.rxBinding
    implementation Libraries.rxBindingCompat
    implementation Libraries.rxBindingCore
    implementation Libraries.rxjava3Coroutines

    //Animations
    implementation Libraries.lottie

    // Glide
    implementation Libraries.glide
    annotationProcessor Libraries.glideAnnotations

    // Custom Views
    implementation Libraries.materialDatePicker

    // Logging
    implementation Libraries.timber

    // Zendesk
    implementation Libraries.zendeskChat
    implementation Libraries.zendeskMessaging

    // Imtercom
    implementation Libraries.intercom

    // Checkout.com
    implementation Libraries.checkoutCom

    // Compose
    implementation Libraries.composeUi
    implementation Libraries.composeMaterial
    implementation Libraries.composePreview
    implementation Libraries.composeActivity
    implementation Libraries.composeCoil
    implementation Libraries.composeCoilSvg
    implementation Libraries.constraintLayoutCompose

    // Stripe
    implementation(Libraries.stripe) {
        exclude group: 'com.github.stephenc.jcip', module: 'jcip-annotations'
    }

    // UI/Instrumentation Tests
    androidTestImplementation(Libraries.espresso) {
        exclude group: 'javax.inject', module: 'support-annotations'
    }
    androidTestImplementation Libraries.mockito
    androidTestImplementation(Libraries.mockitoKotlin) {
        ['kotlin-stdlib', 'kotlin-reflect'].each { exclude module: it }
    }

    // Unit Tests
    testImplementation Libraries.junit
    testImplementation Libraries.mockito
    testImplementation Libraries.mockk
    testImplementation Libraries.hamcrestJunit
    testImplementation Libraries.kotlinJunit
    testImplementation Libraries.kluent
    testImplementation(Libraries.mockitoKotlin) {
        ['kotlin-stdlib', 'kotlin-reflect'].each { exclude module: it }
    }

    testImplementation(Libraries.robolectric) {
        exclude group: 'com.google.guava'
        exclude group: 'com.google.protobuf'
    }

    // For AS running of robolectric
    androidTestImplementation Libraries.testRunner
    androidTestImplementation Libraries.testRules

    testImplementation project(':testutils-android')
    testImplementation project(':testutils')

    debugImplementation Libraries.chuckerDebug
    releaseImplementation Libraries.chuckerRelease
}
